{"ast":null,"code":"var _jsxFileName = \"/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/Session/SyncGraph.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { LineChart, Line, XAxis, YAxis, ReferenceLine, AreaChart, Area, Tooltip } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\"\n};\nconst data = [];\nconst launchDate = 2004;\nconst rand = 300;\n\nfor (let i = 0; i < 7; i++) {\n  const year = 2000 + i;\n  const value = Math.random() * (rand + 50) + 100;\n  let d = {\n    year: year,\n    value: value\n  };\n  data.push(d);\n} // change type to see that the overlap might not be appropriate towards the\n// end of the shorter chart\n\n\nconst type = \"monotone\"; // calculate percentage for launchDate - index = 4, total = 7\n\nconst percentage = 100 - (7 - 4 - 1) / (7 - 1) * 100;\n\nconst SyncGraph = ({\n  syncData\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles,\n    children: [console.log(syncData), /*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 500,\n      height: 300,\n      data: syncData,\n      margin: {\n        top: 5,\n        right: 20,\n        bottom: 5,\n        left: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n          id: \"gradients\",\n          x1: \"0\",\n          y1: \"0\",\n          x2: \"0\",\n          y2: \"1\",\n          children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: `${0}%`,\n            stopColor: \"#5A65EA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: `${90}%`,\n            stopColor: \"#ff6d98\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n        y: 1,\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'white'\n          },\n          children: \"Exceed Threshold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: type,\n        dataKey: \"sync\",\n        fill: \"url(#gradients)\",\n        stroke: \"url(#gradients)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"sync\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_c = SyncGraph;\nexport default SyncGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"SyncGraph\");","map":{"version":3,"sources":["/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/Session/SyncGraph.js"],"names":["React","render","LineChart","Line","XAxis","YAxis","ReferenceLine","AreaChart","Area","Tooltip","styles","fontFamily","textAlign","data","launchDate","rand","i","year","value","Math","random","d","push","type","percentage","SyncGraph","syncData","console","log","top","right","bottom","left","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport { LineChart, Line, XAxis, YAxis, ReferenceLine, AreaChart, Area, Tooltip} from \"recharts\";\n\nconst styles = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\"\n};\n\nconst data = [];\nconst launchDate = 2004;\n\nconst rand = 300;\nfor (let i = 0; i < 7; i++) {\n  const year = 2000 + i;\n  const value = Math.random() * (rand + 50) + 100;\n  let d = {\n    year: year,\n    value: value\n  };\n\n  data.push(d);\n}\n\n// change type to see that the overlap might not be appropriate towards the\n// end of the shorter chart\nconst type = \"monotone\";\n\n// calculate percentage for launchDate - index = 4, total = 7\nconst percentage = 100 - ((7 - 4 - 1) / (7 - 1)) * 100;\n\nconst SyncGraph = ({syncData}) => {\n\n    return ( \n        <div style={styles}>\n            {console.log(syncData)}\n            <AreaChart\n            width={500}\n            height={300}\n            data={syncData}\n            margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n            >\n                <defs>\n            <linearGradient id=\"gradients\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                {/* <stop offset=\"0%\" stopColor=\"#5A65EA\" /> */}\n                <stop offset={`${0}%`} stopColor=\"#5A65EA\"  />\n                <stop offset={`${90}%`} stopColor=\"#ff6d98\" />\n\n                {/* <stop offset=\"100%\" stopColor=\"#ff6d98\" /> */}\n            </linearGradient>\n                \n            </defs>\n            <Tooltip />\n            <ReferenceLine y={1} label={<div style={{color:'white'}}>Exceed Threshold</div>} />\n            {/* <Area type={type} dataKey=\"sync\" fill=\"#5A65EA\" stroke=\"#5A65EA\"/> */}\n            <Area type={type} dataKey=\"sync\" fill=\"url(#gradients)\" stroke=\"url(#gradients)\"/>\n            <XAxis dataKey=\"time\" />\n            <YAxis dataKey=\"sync\"/>\n            </AreaChart>\n        </div>\n     );\n}\n \nexport default SyncGraph;\n"]},"metadata":{},"sourceType":"module"}