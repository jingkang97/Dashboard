{"ast":null,"code":"var _jsxFileName = \"/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/Session/FatigueGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, ReferenceLine, AreaChart, Area, Tooltip } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\"\n}; // change type to see that the overlap might not be appropriate towards the\n// end of the shorter chart\n\nconst type = \"monotone\"; // calculate percentage for launchDate - index = 4, total = 7\n// const percentage = 90.1;\n\nconst FatigueGraph = ({\n  emgData\n}) => {\n  _s();\n\n  const [percentage, setPercentage] = useState(100);\n  const [tired, setTired] = useState(0);\n  const [tiredTime, setTiredTime] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [tiredTimeDuration, setTiredTimeDuration] = useState(null);\n\n  const calculatePercentage = (startTime, tiredTime) => {};\n\n  const findTiredTime = () => {\n    for (let i = 0; i < emgData.length; i++) {\n      if (emgData[i].emg > 3) {\n        setTiredTime(emgData[i].time);\n        setTiredTimeDuration(emgData[i].time - startTime);\n        calculatePercentage(startTime, emgData[i].time);\n        break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (emgData.length > 0) {\n      setStartTime(emgData[0].time);\n    }\n  }, [emgData]);\n  useEffect(() => {\n    if (startTime != null) {\n      findTiredTime();\n    }\n  }, [startTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles,\n    children: [console.log(emgData), /*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 500,\n      height: 300,\n      data: emgData,\n      margin: {\n        top: 5,\n        right: 20,\n        bottom: 5,\n        left: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n          id: \"gradient\",\n          x1: \"0\",\n          y1: \"0\",\n          x2: \"1\",\n          y2: \"0\",\n          children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"0%\",\n            stopColor: \"#5A65EA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: `${percentage}%`,\n            stopColor: \"#5A65EA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: `${percentage}%`,\n            stopColor: \"#ff6d98\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: type,\n        dataKey: \"emg\",\n        fill: \"url(#gradient)\",\n        stroke: \"url(#gradient)\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"emg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n        x: tiredTime,\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'white'\n          },\n          children: tiredTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n        y: 4,\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'white'\n          },\n          children: \"Fatigue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FatigueGraph, \"ZJg/ZvagJqMjICsqQAa+JeQN1do=\");\n\n_c = FatigueGraph;\nexport default FatigueGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"FatigueGraph\");","map":{"version":3,"sources":["/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/Session/FatigueGraph.js"],"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","ReferenceLine","AreaChart","Area","Tooltip","styles","fontFamily","textAlign","type","FatigueGraph","emgData","percentage","setPercentage","tired","setTired","tiredTime","setTiredTime","startTime","setStartTime","tiredTimeDuration","setTiredTimeDuration","calculatePercentage","findTiredTime","i","length","emg","time","console","log","top","right","bottom","left","color"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { LineChart, Line, XAxis, YAxis, ReferenceLine, AreaChart, Area, Tooltip} from \"recharts\";\n\nconst styles = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\"\n};\n\n// change type to see that the overlap might not be appropriate towards the\n// end of the shorter chart\nconst type = \"monotone\";\n\n// calculate percentage for launchDate - index = 4, total = 7\n// const percentage = 90.1;\n\n\n\nconst FatigueGraph = ({emgData}) => {\n    const [percentage, setPercentage] = useState(100)\n    const [tired, setTired] = useState(0)\n    const [tiredTime, setTiredTime] = useState(null)\n    const [startTime, setStartTime] = useState(null)\n    const [tiredTimeDuration, setTiredTimeDuration] = useState(null)\n\n    const calculatePercentage = (startTime, tiredTime) => {\n        \n    }\n\n    const findTiredTime = () => {\n        for(let i = 0; i < emgData.length; i++){\n            if( emgData[i].emg > 3){\n                setTiredTime(emgData[i].time)\n                setTiredTimeDuration(emgData[i].time - startTime)\n                calculatePercentage(startTime, emgData[i].time)\n                break;\n            }\n        }\n    }\n\n    useEffect(() => {\n        if(emgData.length > 0){\n            setStartTime(emgData[0].time)\n        }\n    }, [emgData])\n\n    useEffect(() => {\n        if(startTime != null){\n            findTiredTime()\n        }\n       \n    }, [startTime])\n\n    return ( \n        <div style={styles}>\n            {console.log(emgData)}\n            <AreaChart\n            width={500}\n            height={300}\n            data={emgData}\n            margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n            >\n            <defs>\n            <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                <stop offset=\"0%\" stopColor=\"#5A65EA\" />\n                <stop offset={`${percentage}%`} stopColor=\"#5A65EA\"  />\n                <stop offset={`${percentage}%`} stopColor=\"#ff6d98\" />\n                {/* <stop offset=\"100%\" stopColor=\"#ff6d98\" /> */}\n            </linearGradient>\n                \n            </defs>\n            <Tooltip />\n            <Area type={type} dataKey=\"emg\" fill=\"url(#gradient)\" stroke=\"url(#gradient)\" strokeWidth={3}/>\n            <XAxis dataKey=\"time\" />\n            <YAxis dataKey=\"emg\"/>\n            <ReferenceLine x={tiredTime} label={<div style={{color:'white'}}>{tiredTime}</div>} />\n            {/* <ReferenceLine x={tiredTime}  */}\n            <ReferenceLine y={4} label={<div style={{color:'white'}}>Fatigue</div>} />\n            </AreaChart>\n        </div>\n     );\n}\n \nexport default FatigueGraph;\n"]},"metadata":{},"sourceType":"module"}