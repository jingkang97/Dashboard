{"ast":null,"code":"var _jsxFileName = \"/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/Session/FatigueGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, ReferenceLine, AreaChart, Area, Tooltip } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\"\n}; // change type to see that the overlap might not be appropriate towards the\n// end of the shorter chart\n\nconst type = \"monotone\"; // calculate percentage for launchDate - index = 4, total = 7\n// const percentage = 90.1;\n\nconst FatigueGraph = ({\n  emgData\n}) => {\n  _s();\n\n  const [percentage, setPercentage] = useState(0); // const [tired, setTired] = useState(0)\n\n  const [tiredTime, setTiredTime] = useState(null);\n  const [startTime, setStartTime] = useState(null); // const [tiredTimeDuration, setTiredTimeDuration] = useState(null)\n\n  const calculatePercentage = () => {\n    let maximum = 0;\n\n    for (let i = 0; i < emgData.length; i++) {\n      maximum = Math.max(emgData[i].emg, maximum);\n    }\n\n    if (maximum > 1) {\n      setPercentage((maximum - 3) * 100);\n    }\n  };\n\n  const findTiredTime = () => {\n    for (let i = 0; i < emgData.length; i++) {\n      if (emgData[i].emg > 3) {\n        setTiredTime(emgData[i].time); // setTiredTimeDuration(emgData[i].time - startTime)\n\n        calculatePercentage();\n        break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (emgData.length > 0) {\n      setStartTime(emgData[0].time);\n    }\n  }, [emgData]);\n  useEffect(() => {\n    if (startTime != null) {\n      findTiredTime();\n    }\n  }, [startTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles,\n    children: [console.log(emgData), alert(percentage), /*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 500,\n      height: 300,\n      data: emgData,\n      margin: {\n        top: 5,\n        right: 20,\n        bottom: 5,\n        left: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n          id: \"gradients\",\n          x1: \"0\",\n          y1: \"0\",\n          x2: \"0\",\n          y2: \"1\",\n          children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: `${100 - percentage}%`,\n            stopColor: \"#ff6d98\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: `${100 - percentage}%`,\n            stopColor: \"#5A65EA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: type,\n        dataKey: \"emg\",\n        fill: \"url(#gradients)\",\n        stroke: \"url(#gradients)\",\n        strokeWidth: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"emg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n        x: tiredTime,\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'white'\n          },\n          children: tiredTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n        y: 4,\n        label: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: 'white'\n          },\n          children: \"Fatigue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FatigueGraph, \"rGd0uCbbo7hug5uciSiKW6n2Kq4=\");\n\n_c = FatigueGraph;\nexport default FatigueGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"FatigueGraph\");","map":{"version":3,"sources":["/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/Session/FatigueGraph.js"],"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","ReferenceLine","AreaChart","Area","Tooltip","styles","fontFamily","textAlign","type","FatigueGraph","emgData","percentage","setPercentage","tiredTime","setTiredTime","startTime","setStartTime","calculatePercentage","maximum","i","length","Math","max","emg","findTiredTime","time","console","log","alert","top","right","bottom","left","color"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { LineChart, Line, XAxis, YAxis, ReferenceLine, AreaChart, Area, Tooltip} from \"recharts\";\n\nconst styles = {\n  fontFamily: \"sans-serif\",\n  textAlign: \"center\"\n};\n\n// change type to see that the overlap might not be appropriate towards the\n// end of the shorter chart\nconst type = \"monotone\";\n\n// calculate percentage for launchDate - index = 4, total = 7\n// const percentage = 90.1;\n\n\n\nconst FatigueGraph = ({emgData}) => {\n    const [percentage, setPercentage] = useState(0)\n    // const [tired, setTired] = useState(0)\n    const [tiredTime, setTiredTime] = useState(null)\n    const [startTime, setStartTime] = useState(null)\n    // const [tiredTimeDuration, setTiredTimeDuration] = useState(null)\n\n    const calculatePercentage = () => {\n        let maximum = 0\n        for(let i = 0; i < emgData.length; i ++){\n            maximum = Math.max(emgData[i].emg, maximum)\n        }\n        if(maximum > 1){\n            setPercentage((maximum - 3) * 100)\n        }\n    }\n\n    const findTiredTime = () => {\n        for(let i = 0; i < emgData.length; i++){\n            if( emgData[i].emg > 3){\n                setTiredTime(emgData[i].time)\n                // setTiredTimeDuration(emgData[i].time - startTime)\n                calculatePercentage()\n                break;\n            }\n        }\n    }\n\n    useEffect(() => {\n        if(emgData.length > 0){\n            setStartTime(emgData[0].time)\n        }\n    }, [emgData])\n\n    useEffect(() => {\n        if(startTime != null){\n            findTiredTime()\n        }\n       \n    }, [startTime])\n\n    return ( \n        <div style={styles}>\n            {console.log(emgData)}\n            {alert(percentage)}\n            <AreaChart\n            width={500}\n            height={300}\n            data={emgData}\n            margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n            >\n            <defs>\n            <linearGradient id=\"gradients\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                {/* <stop offset=\"0%\" stopColor=\"#5A65EA\" /> */}\n                <stop offset={`${100-percentage}%`} stopColor=\"#ff6d98\" />\n                <stop offset={`${100-percentage}%`} stopColor=\"#5A65EA\"  />\n\n                {/* <stop offset=\"100%\" stopColor=\"#ff6d98\" /> */}\n            </linearGradient>\n                \n            </defs>\n            <Tooltip />\n            <Area type={type} dataKey=\"emg\" fill=\"url(#gradients)\" stroke=\"url(#gradients)\" strokeWidth={3}/>\n            <XAxis dataKey=\"time\" />\n            <YAxis dataKey=\"emg\"/>\n            <ReferenceLine x={tiredTime} label={<div style={{color:'white'}}>{tiredTime}</div>} />\n            {/* <ReferenceLine x={tiredTime}  */}\n            <ReferenceLine y={4} label={<div style={{color:'white'}}>Fatigue</div>} />\n            </AreaChart>\n        </div>\n     );\n}\n \nexport default FatigueGraph;\n"]},"metadata":{},"sourceType":"module"}