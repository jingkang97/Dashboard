{"ast":null,"code":"var _jsxFileName = \"/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/mqtt/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\nimport Receiver from './Receiver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const QosOption = /*#__PURE__*/createContext([]);\nconst qosOption = [{\n  label: '0',\n  value: 0\n}, {\n  label: '1',\n  value: 1\n}, {\n  label: '2',\n  value: 2\n}];\n\nconst MQTT = () => {\n  _s();\n\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState('Connect');\n  const [start, setStart] = useState(false);\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n      });\n      client.on('error', err => {\n        console.error('Connection error: ', err);\n        client.end();\n      });\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      });\n      client.on('message', (topic, message) => {\n        const payload = {\n          topic,\n          message: message.toString()\n        };\n        setPayload(payload);\n      });\n    }\n  }, [client]);\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect');\n      });\n    }\n  }; // const mqttPublish = (context) => {\n  // if (client) {\n  //     const { topic, qos, payload } = context;\n  //     client.publish(topic, payload, { qos }, error => {\n  //     if (error) {\n  //         console.log('Publish error: ', error);\n  //     }\n  //     });\n  // }\n  // }\n\n\n  const mqttSub = subscription => {\n    if (client) {\n      const {\n        topic,\n        qos\n      } = subscription;\n      client.subscribe(topic, {\n        qos\n      }, error => {\n        if (error) {\n          console.log('Subscribe to topics error', error);\n          return;\n        }\n\n        setIsSub(true);\n      });\n    }\n  };\n\n  const mqttUnSub = subscription => {\n    if (client) {\n      const {\n        topic\n      } = subscription;\n      client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error);\n          return;\n        }\n\n        setIsSub(false);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Connection, {\n      connect: mqttConnect,\n      disconnect: mqttDisconnect,\n      connectBtn: connectStatus,\n      start: start\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(QosOption.Provider, {\n      value: qosOption,\n      children: /*#__PURE__*/_jsxDEV(Subscriber, {\n        sub: mqttSub,\n        unSub: mqttUnSub,\n        showUnsub: isSubed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Receiver, {\n      payload: payload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MQTT, \"Aoqb4XS+9XCHVfzm1hqSMh+mWuc=\");\n\n_c = MQTT;\nexport default MQTT;\n\nvar _c;\n\n$RefreshReg$(_c, \"MQTT\");","map":{"version":3,"sources":["/Users/jingkangng/Documents/Y4S1/CG4002/dashboard/client/src/components/mqtt/index.js"],"names":["React","createContext","useState","useEffect","mqtt","Connection","Publisher","Subscriber","Receiver","QosOption","qosOption","label","value","MQTT","client","setClient","isSubed","setIsSub","payload","setPayload","connectStatus","setConnectStatus","start","setStart","mqttConnect","host","mqttOption","connect","on","err","console","error","end","topic","message","toString","mqttDisconnect","mqttSub","subscription","qos","subscribe","log","mqttUnSub","unsubscribe"],"mappings":"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","sourcesContent":["import React, {createContext, useState, useEffect} from 'react';\nimport mqtt from 'mqtt';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\nimport Receiver from './Receiver';\n\nexport const QosOption = createContext([])\nconst qosOption = [\n    {\n      label: '0',\n      value: 0,\n    }, {\n      label: '1',\n      value: 1,\n    }, {\n      label: '2',\n      value: 2,\n    },\n  ];\n\nconst MQTT = () => {\n    const [client, setClient] = useState(null);\n    const [isSubed, setIsSub] = useState(false);\n    const [payload, setPayload] = useState({});\n    const [connectStatus, setConnectStatus] = useState('Connect');\n    const [start, setStart] = useState(false)\n\n    const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n    };\n\n    useEffect(() => {\n    if (client) {\n        client.on('connect', () => {\n        setConnectStatus('Connected');\n        });\n        client.on('error', (err) => {\n        console.error('Connection error: ', err);\n        client.end();\n        });\n        client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n        });\n        client.on('message', (topic, message) => {\n        const payload = { topic, message: message.toString() };\n        setPayload(payload);\n        });\n    }\n    }, [client]);\n\n    const mqttDisconnect = () => {\n    if (client) {\n        client.end(() => {\n        setConnectStatus('Connect');\n        });\n    }\n    }\n\n    // const mqttPublish = (context) => {\n    // if (client) {\n    //     const { topic, qos, payload } = context;\n    //     client.publish(topic, payload, { qos }, error => {\n    //     if (error) {\n    //         console.log('Publish error: ', error);\n    //     }\n    //     });\n    // }\n    // }\n\n    const mqttSub = (subscription) => {\n    if (client) {\n        const { topic, qos } = subscription;\n        client.subscribe(topic, { qos }, (error) => {\n        if (error) {\n            console.log('Subscribe to topics error', error)\n            return\n        }\n        setIsSub(true)\n        });\n    }\n    };\n\n    const mqttUnSub = (subscription) => {\n    if (client) {\n        const { topic } = subscription;\n        client.unsubscribe(topic, error => {\n        if (error) {\n            console.log('Unsubscribe error', error)\n            return\n        }\n        setIsSub(false);\n        });\n    }\n    };\n    return ( \n        <>\n        <Connection connect={mqttConnect} disconnect={mqttDisconnect} connectBtn={connectStatus} start={start}/>\n        <QosOption.Provider value={qosOption}>\n            <Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\n            {/* <Publisher publish={mqttPublish} /> */}\n        </QosOption.Provider>\n        <Receiver payload={payload}/>\n        </>\n    );\n    }\n   \n  export default MQTT;\n\n"]},"metadata":{},"sourceType":"module"}